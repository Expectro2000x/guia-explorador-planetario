C:\Users\aruizc01\Documents\GitHub\guia-explorador-planetario\app\src\Especies\ActualizarEspecies.tsx

import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";
//Interface
import Especie from "../compononent/interfaces/Especies";

const ActualizarEspecies = () => {
    const {id} = useParams();
    const [especie, setEspecie] = useState<Especie | null>(null);
    const navigate = useNavigate();

    useEffect(() => {;
        axios.get("http://localhost:4000/especies/"+id)
        .then(result => {
            console.log("Data recibida:", result.data);
            setEspecie(result.data);
        })
        .catch(err => 
            console.error(err)
        );
    }, [id]);
    const Update = (e: { preventDefault: () => void; }) => {
        e.preventDefault();
        if (!especie) return;
        axios.put("http://localhost:4000/especies/"+id, especie)
        .then(result => {
            console.log(result)
            navigate("/especies")
            })
        .catch(err => console.log(err));
    };
    if (!especie) { // Estado de carga
        return <div>Cargando los datos de las especies...</div>;
    }
    return (
        <div className="d-flex vh-100 bg-primary justify-content-center align-items-center">
           <div className="w-50 bg-white rounded p-3">
                <form onSubmit={Update}>
                    <h2>Actualizar Especie</h2>
                    <div className="mb-2">
                        <label htmlFor="nombre">Nombre</label>
                        <input type="text" placeholder="Introduzca el nombre de la especie" className="form-control" id="nombre" 
                        value={especie.nombre} onChange={(e) => setEspecie({ ...especie, nombre: e.target.value })}/>
                    </div>
                    <div className="mb-2">
                        <label htmlFor="tamano">Tamaño</label>
                        <input type="number" placeholder="Introduzca el tamaño de la especie" className="form-control" id="tamano"
                        value={especie.tamano} onChange={(e) => {
                            const tamano = Number(e.target.value); // Convierte el dato de string a numero
                            setEspecie({ ...especie, tamano: isNaN(tamano) ? 0 : tamano });
                        }}/>
                    </div>
                    <div className="mb-2">
                        <label htmlFor="peso">Peso</label>
                        <input type="number" placeholder="Introduzca el peso de la especie" className="form-control" id="peso"
                        value={especie.peso} onChange={(e) => {
                            const peso = Number(e.target.value);
                            setEspecie({ ...especie, peso: isNaN(peso) ? 0 : peso });
                        }}/>
                    </div>
                    <div className="mb-2">
                        <label htmlFor="habitat">Habitat</label>
                        <input type="text" placeholder="Introduzca el habitat de la especie" className="form-control" id="habitat"
                        value={especie.habitat} onChange={(e) => setEspecie({ ...especie, habitat: e.target.value })}/>
                    </div>
                    <div className="mb-2">
                        <label htmlFor="alimentacion">Alimentación</label>
                        <input type="text" placeholder="Introduzca la alimentación de la especie" className="form-control" id="alimentacion"
                        value={especie.alimentacion} onChange={(e) => setEspecie({ ...especie, alimentacion: e.target.value })}/>
                    </div>
                    <div className="mb-2">
                        <label htmlFor="tipo">Tipo</label>
                        <input type="text" placeholder="Introduzca el tipo de la especie" className="form-control" id="tipo"
                        value={especie.tipo} onChange={(e) => setEspecie({ ...especie, tipo: e.target.value })}/>
                    </div>
                    <div className="mb-2">
                        <label htmlFor="descripcion">Descripción</label>
                        <input type="text" placeholder="Introduzca la descripción de la especie" className="form-control" id="descripcion"
                        value={especie.descripcion} onChange={(e) => setEspecie({ ...especie, descripcion: e.target.value })}/>
                    </div>
                    <button className="btn btn-success">Actualizar</button>
                </form>
            </div>
        </div>
    )
};

export default ActualizarEspecies;

C:\Users\aruizc01\Documents\GitHub\guia-explorador-planetario\app\src\Especies\CrearEspecies.tsx

import React, { useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";

const CrearEspecies = () => {
    const [nombre, setNombre] = useState<unknown | null>(null);
    const [tamano, setTamano] = useState<unknown | null>(null);
    const [peso, setPeso] = useState<unknown | null>(null);
    const [habitat, setHabitat] = useState<unknown | null>(null);
    const [alimentacion, setAlimentacion] = useState<unknown | null>(null);
    const [tipo, setTipo] = useState<unknown | null>(null);
    const [descripcion, setDescripcion] = useState<unknown | null>(null);
    const navigate = useNavigate();

    const Submit = (e: { preventDefault: () => void; }) => {
        e.preventDefault();
        axios.post("http://localhost:4000/especies", {nombre, tamano, peso, habitat, alimentacion, tipo, descripcion })
        .then(result => {
            console.log(result)
            navigate("/especies")
            })
        .catch(err => console.log(err));
    };
    return (
        <div className="d-flex vh-100 bg-primary justify-content-center align-items-center">
           <div className="w-50 bg-white rounded p-3">
                <form onSubmit={Submit}>
                    <h2>Agregar Especie</h2>
                    <div className="mb-2">
                        <label htmlFor="nombre">Nombre</label>
                        <input type="text" placeholder="Introduzca el nombre de la especie" className="form-control" id="nombre"
                        onChange={(e) => setNombre(e.target.value)}/>
                    </div>
                    <div className="mb-2">
                        <label htmlFor="tamano">Tamaño</label>
                        <input type="text" placeholder="Introduzca el tamaño de la especie" className="form-control" id="tamano"
                        onChange={(e) => setTamano(e.target.value)}/>
                    </div>
                    <div className="mb-2">
                        <label htmlFor="peso">Peso</label>
                        <input type="text" placeholder="Introduzca el peso de la especie" className="form-control" id="peso"
                        onChange={(e) => setPeso(e.target.value)}/>
                    </div>
                    <div className="mb-2">
                        <label htmlFor="habitat">Habitat</label>
                        <input type="text" placeholder="Introduzca el habitat de la especie" className="form-control" id="habitat"
                        onChange={(e) => setHabitat(e.target.value)}/>
                    </div>
                    <div className="mb-2">
                        <label htmlFor="alimentacion">Alimentación</label>
                        <input type="text" placeholder="Introduzca la alimentación de la especie" className="form-control" id="alimentacion" 
                        onChange={(e) => setAlimentacion(e.target.value)}/>
                    </div>
                    <div className="mb-2">
                        <label htmlFor="tipo">Tipo</label>
                        <input type="text" placeholder="Introduzca el tipo de la especie" className="form-control" id="tipo"
                        onChange={(e) => setTipo(e.target.value)}/>
                    </div>
                    <div className="mb-2">
                        <label htmlFor="descripcion">Descripción</label>
                        <input type="text" placeholder="Introduzca la descripción de la especie" className="form-control" id="descripcion"
                        onChange={(e) => setDescripcion(e.target.value)}/>
                    </div>
                    <button className="btn btn-success">Registrar</button>
                </form>
            </div>
        </div>
    )
};

export default CrearEspecies;

C:\Users\aruizc01\Documents\GitHub\guia-explorador-planetario\app\src\Especies\Especies.tsx

import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import axios from "axios";
//Interface
import Especie from "../compononent/interfaces/Especies";

function Especies () {
    const [especies, setEspecies] = useState<Especie[]>([]);
    const [error, setError] = useState<string | null>(null);
    const [loading, setLoading] = useState(true)

    useEffect(() => {
        setLoading(true);
        axios.get("http://localhost:4000/especies")
        .then((result) => {
            setEspecies(result.data);
            setLoading(false);})
        .catch(err => {
            console.error("Error al recibir las especies:", err);
            setError("La carga de datos de las especies fallo.");
            setLoading(false);
        });
    }, []);
    if (loading) {
        return <div>Cargando los datos de las especies...</div>; // Mensaje de carga
      }
    
      if (error) {
        return <div>{error}</div>;
      }
    
      if (!especies) { // En caso de que no se puedan cargar los datos (por un error de la API)
          return <div>No se encontraron datos de las especies.</div>
      }
    
    const handleDelete = (id) => {
        axios.delete("http://localhost:4000/especies/"+id)
        .then(result => {
            console.log(result);
            setEspecies(especies.filter(especie => especie._id !== id));
        })
        .catch(err => 
            console.error(err)
        );
    }
    
    return (
        <div className="d-flex vh-100 bg-primary justify-content-center align-items-center">
           <div className="bg-white rounded p-3">
                <Link to={"/crear"} className="btn btn-success">Añadir</Link>
                <table className="table">
                    <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Tamaño</th>
                                <th>Peso</th>
                                <th>Habitat</th>
                                <th>Alimentación</th>
                                <th>Tipo</th>
                                <th>Descripción</th>
                                <th>Acción</th>
                            </tr>
                    </thead>
                    <tbody>
                        {especies.length === 0 ? ( // Verificación de si el arraw está vacio (estado inicial o sin data)
                                <tr><td colSpan={8}>No hay datos de especies disponibles en este momento.</td></tr>
                            ) : (
                            especies.map((especie) => (
                                <tr key={especie._id}>
                                <td>{especie.nombre}</td>
                                <td>{especie.tamano}</td>
                                <td>{especie.peso}</td>
                                <td>{especie.habitat}</td>
                                <td>{especie.alimentacion}</td>
                                <td>{especie.tipo}</td>
                                <td>{especie.descripcion}</td>
                                <td>
                                    <Link to={`/actualizar/${especie._id}`} className="btn btn-success">
                                    Actualizar
                                    </Link>
                                    <button className="btn btn-danger" onClick={() => handleDelete(especie._id)}>Eliminar</button>
                                </td>
                                </tr>
                            ))
                        )}
                    </tbody>
                </table>
            </div>
        </div>
    )
};

export default Especies;

aquí esta el contenido de interfaces


C:\Users\aruizc01\Documents\GitHub\guia-explorador-planetario\app\src\compononent\interfaces\Especies.tsx


//La interfaz de las especies
interface Especie {
    _id: string; // Include the _id!
    nombre: string;
    tamano: number; // Or string, depending on your data type
    peso: number; // Or string
    habitat: string;
    alimentacion: string;
    tipo: string;
    descripcion: string;
    createdAt?: string; // Optional properties
    updatedAt?: string;
    __v?: number;
}

export default Especie;

C:\Users\aruizc01\Documents\GitHub\guia-explorador-planetario\app\src\compononent\interfaces\TipoCarta.tsx

// La interfaz de las cartas
interface TipoCarta {
    id: string;
    volteada: boolean;
    imagenReverso: string;
    imagenFrente: string;
    clickable: boolean;
    coincidenciaCartaId: string;
  };

export default TipoCarta;

aquí esta el contenido de cartas "app\src\compononent\cartas"

import styled, { css } from 'styled-components';

export const Wrapper = styled.div`
  position: relative;
  perspective: 1000px;

  .front.volteada {
    z-index: 1;
    transform: rotateY(180deg);
  }
`;

type Props = {
  $volteada: boolean;
};

const sharedStyles = css`
  width: 100%;
  height: 100%;
  transition: all 0.5s;
  backface-visibility: hidden;
  cursor: pointer;
  transform-style: preserve-3d;
`;

export const ImagenFrente = styled.img<Props>`
  ${sharedStyles}

  z-index: ${props => (props.$volteada ? 2 : 1)};
  transform: ${props => (props.$volteada ? 'rotate(0deg)' : 'rotateY(180deg)')};
`;

export const ImagenReverso = styled.img<Props>`
  ${sharedStyles}

  z-index: ${props => (props.$volteada ? 1 : 2)};
  transform: ${props => (props.$volteada ? 'rotateY(180deg)' : 'rotate(360deg)')};
  position: absolute;
  top: 0px;
  left: 0px;
`;

C:\Users\aruizc01\Documents\GitHub\guia-explorador-planetario\app\src\compononent\cartas\Carta.styles.ts

ahora este es el código de carta.tsx
C:\Users\aruizc01\Documents\GitHub\guia-explorador-planetario\app\src\compononent\cartas\Carta.tsx

import React from "react";
//Tipos
import TipoCarta from "../interfaces/TipoCarta";
import { Wrapper, ImagenFrente, ImagenReverso } from "./Carta.styles";


type Props = {
    carta: TipoCarta;
    callback: (carta: TipoCarta) => void;
}

const Carta: React.FC<Props> = ({carta, callback}) => {
    const handleClick = () => {
        if(carta.clickable) callback(carta);
    };
    
    return (
        <Wrapper onClick={handleClick}>
            <ImagenFrente $volteada={carta.volteada} src={carta.imagenFrente} alt="carta-frente" />
            <ImagenReverso $volteada={carta.volteada} src={carta.imagenReverso} alt="carta-reverso" />
        </Wrapper>
    );
}

export default Carta;










